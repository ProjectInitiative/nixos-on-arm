name: "Build NixOS Images"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest  # Use standard x86_64 runners
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Add binfmt emulation support before installing Nix
    - name: Set up QEMU for multi-platform emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
        
    # Use the modern Determinate Systems Nix installer
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v14
      
    # Enable Magic Nix Cache for much better caching
    - name: Setup Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@v8
      
    # Optional: Setup Cachix for additional caching
    - name: Setup Cachix
      uses: cachix/cachix-action@v15
      with:
        name: nix-community
        # authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'  # Uncomment if you have a token
      continue-on-error: true
    
    # Configure Nix for cross-compilation  
    - name: Configure Nix for cross-compilation
      run: |
        echo "extra-platforms = aarch64-linux" | sudo tee -a /etc/nix/nix.conf
        echo "builders-use-substitutes = true" | sudo tee -a /etc/nix/nix.conf
        sudo systemctl restart nix-daemon || true
        
    # Verify configuration
    - name: Verify Nix configuration
      run: |
        echo "=== Nix Configuration ==="
        nix show-config | grep -E "(substituters|extra-platforms|system)" || true
        echo ""
        echo "=== Testing cache connectivity ==="
        curl -I https://cache.nixos.org/nix-cache-info || echo "Cache connection failed"
        
    - name: Build E52C Images (Cross-compiled)
      run: |
        echo "Building E52C images via cross-compilation..."
        nix build .#e52c-cross --print-build-logs
        
    - name: List built artifacts
      run: |
        echo "=== Build Results ==="
        ls -la result/
        echo ""
        echo "=== Image Sizes ==="
        du -h result/*.img
        echo ""
        echo "=== Image Details ==="
        for img in result/*.img; do
          echo "File: $(basename $img)"
          echo "Size: $(stat -c%s $img) bytes"
          echo "---"
        done
        
    - name: Upload E52C Images
      uses: actions/upload-artifact@v4
      with:
        name: nixos-e52c-images
        path: |
          result/*.img
          result/nix-support/
        retention-days: 30
        
    - name: Create Release Assets (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p release-assets
        cp result/*.img release-assets/
        cd release-assets
        
        # Create checksums
        sha256sum *.img > SHA256SUMS
        
        # Compress images for release
        for img in *.img; do
          echo "Compressing $img..."
          xz -9 -T0 "$img"
        done
        
        ls -la
        
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: nixos-e52c-release
        path: release-assets/
        retention-days: 90

  # Future job for additional boards
  build-additional-boards:
    runs-on: ubuntu-latest
    if: false  # Disabled until more boards are added
    strategy:
      matrix:
        board: [e25]  # Add boards as they become available
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up QEMU for multi-platform emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
        
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v14
      
    - name: Setup Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@v8
      
    - name: Configure Nix for cross-compilation
      run: |
        echo "extra-platforms = aarch64-linux" | sudo tee -a /etc/nix/nix.conf
        echo "builders-use-substitutes = true" | sudo tee -a /etc/nix/nix.conf
        sudo systemctl restart nix-daemon || true
          
    - name: Build ${{ matrix.board }} Images
      run: |
        echo "Building ${{ matrix.board }} images..."
        nix build .#${{ matrix.board }}-cross --print-build-logs
        
    - name: Upload ${{ matrix.board }} Images
      uses: actions/upload-artifact@v4
      with:
        name: nixos-${{ matrix.board }}-images
        path: result/*.img
        retention-days: 30
